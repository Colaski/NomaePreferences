// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64e-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NomaePreferences
@_exported import NomaePreferences
import Swift
import SwiftUI
import UIKit
public struct ColorField : SwiftUI.View {
  public init(_ title: Swift.String, selection: SwiftUI.Binding<Swift.String>)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16NomaePreferences10ColorFieldV4bodyQrvp", 0) ðŸ¦¸
}
public struct Header<Icon> : SwiftUI.View where Icon : SwiftUI.View {
  public init(_ packageName: Swift.String, icon: Icon?, subtitle: Swift.String? = nil)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16NomaePreferences6HeaderV4bodyQrvp", 0) ðŸ¦¸<Icon>
}
@objc @_inheritsConvenienceInitializers open class NomaePreferencesController : NomaePreferences.PreferenceLoaderController {
  open var suiView: SwiftUI.AnyView
  @objc override dynamic public func loadView()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PreferenceLoaderController : UIKit.UIViewController {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@frozen @propertyWrapper public struct Preference<Value> : SwiftUI.DynamicProperty {
  private var __value: SwiftUI.ObservedObject<NomaePreferences.Storage<Value>>
  private let saveValue: (Value) -> Swift.Void
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
}
extension Preference where Value == Swift.Bool {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.Int {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.Double {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.String {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Foundation.URL {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Foundation.Data {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.RawRepresentable, Value.RawValue == Swift.String {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
