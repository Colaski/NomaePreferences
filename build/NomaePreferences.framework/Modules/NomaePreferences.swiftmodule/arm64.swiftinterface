// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.4 clang-1205.0.19.54)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NomaePreferences
import Combine
import Foundation
import MobileCoreServices
@_exported import NomaePreferences
import Swift
import SwiftUI
import UIKit
public struct TwitterLogo : SwiftUI.Shape {
  public init()
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<NomaePreferences.TwitterLogo, SwiftUI.ForegroundStyle>
}
public struct Header<Icon> : SwiftUI.View where Icon : SwiftUI.View {
  public init(_ packageName: Swift.String, icon: Icon? = nil, subtitle: Swift.String? = nil)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s16NomaePreferences6HeaderV4bodyQrvp", 0) ðŸ¦¸<Icon>
}
public func respring()
public struct GitHubLogo : SwiftUI.Shape {
  public init()
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<NomaePreferences.GitHubLogo, SwiftUI.ForegroundStyle>
}
extension Application : Swift.RawRepresentable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public func sbreload()
public struct Application {
  public let bundleID: Swift.String
  public let proxy: NomaePreferences.LSApplicationProxy
  public let name: Swift.String?
  public let icon: UIKit.UIImage?
  public init(_ bundleID: Swift.String)
  public static var allInstalledApplications: [NomaePreferences.Application] {
    get
  }
}
public func shell(_ launchPath: Swift.String, args: [Swift.String] = [])
extension Application : Swift.Equatable {
  public static func == (lhs: NomaePreferences.Application, rhs: NomaePreferences.Application) -> Swift.Bool
}
extension Color : Swift.RawRepresentable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public struct RedditLogo : SwiftUI.Shape {
  public init()
  public func path(in rect: CoreGraphics.CGRect) -> SwiftUI.Path
  public typealias AnimatableData = SwiftUI.EmptyAnimatableData
  public typealias Body = SwiftUI._ShapeView<NomaePreferences.RedditLogo, SwiftUI.ForegroundStyle>
}
extension Application : Swift.Hashable {
}
@objc @_inheritsConvenienceInitializers open class NomaePreferencesController : NomaePreferences.PreferenceLoaderController {
  open var suiView: SwiftUI.AnyView
  @objc override dynamic public func loadView()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class PreferenceLoaderController : UIKit.UIViewController {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@frozen @propertyWrapper public struct Preference<Value> : SwiftUI.DynamicProperty {
  private var __value: SwiftUI.ObservedObject<NomaePreferences.Storage<Value>>
  private let saveValue: (Value) -> Swift.Void
  public var wrappedValue: Value {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<Value> {
    get
  }
}
@_hasMissingDesignatedInitializers @usableFromInline
internal class Storage<Value> : ObjectiveC.NSObject, Combine.ObservableObject {
  @objc deinit
  @usableFromInline
  internal typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
}
extension Preference where Value == Swift.Bool {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.Int {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.Double {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Swift.String {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Foundation.Data {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == Foundation.URL {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.RawRepresentable, Value.RawValue == Swift.Int {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.RawRepresentable, Value.RawValue == Swift.String {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == [Swift.Bool] {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == [Swift.Int] {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == [Swift.Double] {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == [Swift.String] {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value == [Foundation.Data] {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.ExpressibleByArrayLiteral, Value.ArrayLiteralElement == Foundation.URL {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.ExpressibleByArrayLiteral, Value.ArrayLiteralElement : Swift.RawRepresentable, Value.ArrayLiteralElement.RawValue == Swift.Int {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
extension Preference where Value : Swift.ExpressibleByArrayLiteral, Value.ArrayLiteralElement : Swift.RawRepresentable, Value.ArrayLiteralElement.RawValue == Swift.String {
  public init(wrappedValue: Value, _ key: Swift.String, identifier: Swift.String)
}
